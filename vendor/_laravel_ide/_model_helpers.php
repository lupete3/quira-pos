<?php

namespace App\Models {

  /**
   * App\Models\Brand
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $name
   * @property int $tenant_id
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Product> $products
   * @property-read int|null $products_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand query()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Brand|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Brand|null first(array|string $columns)
   * @method static Brand firstOrFail(array|string $columns, string|null $message)
   * @method static Brand sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Brand>|Brand tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Brand extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CashRegister
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float $current_balance
   * @property float $opening_balance
   * @property int $store_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Store $store
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\CashTransaction> $transactions
   * @property-read int|null $transactions_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\CashWithdrawal> $withdrawals
   * @property-read int|null $withdrawals_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereOpeningBalance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereCurrentBalance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister query()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static CashRegister|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister clone()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static CashRegister|null first(array|string $columns)
   * @method static CashRegister firstOrFail(array|string $columns, string|null $message)
   * @method static CashRegister sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<CashRegister>|CashRegister tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CashRegister extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CashTransaction
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $description
   * @property float $amount
   * @property string|null $category
   * @property mixed $type
   * @property int|null $user_id
   * @property int $cash_register_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\CashRegister $cashRegister
   * @property-read \App\Models\User $user
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereCashRegisterId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereType($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereCategory($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction query()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static CashTransaction|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction clone()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static CashTransaction|null first(array|string $columns)
   * @method static CashTransaction firstOrFail(array|string $columns, string|null $message)
   * @method static CashTransaction sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<CashTransaction>|CashTransaction tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CashTransaction extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CashWithdrawal
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $reason
   * @property float $amount
   * @property int|null $user_id
   * @property int $cash_register_id
   * @property int $id
   * @property-read \App\Models\CashRegister $cashRegister
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereCashRegisterId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal query()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static CashWithdrawal|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal clone()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static CashWithdrawal|null first(array|string $columns)
   * @method static CashWithdrawal firstOrFail(array|string $columns, string|null $message)
   * @method static CashWithdrawal sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<CashWithdrawal>|CashWithdrawal tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CashWithdrawal extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Category
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $description
   * @property string $name
   * @property int $tenant_id
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Product> $products
   * @property-read int|null $products_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category query()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Category|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Category|null first(array|string $columns)
   * @method static Category firstOrFail(array|string $columns, string|null $message)
   * @method static Category sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Category>|Category tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Category extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Client
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float $debt
   * @property string|null $address
   * @property string|null $email
   * @property string|null $phone
   * @property string $name
   * @property int $tenant_id
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Sale> $sales
   * @property-read int|null $sales_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\ClientDebt> $debts
   * @property-read int|null $debts_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDebt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client query()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Client|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Client|null first(array|string $columns)
   * @method static Client firstOrFail(array|string $columns, string|null $message)
   * @method static Client sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Client>|Client tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Client extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ClientDebt
   *
   * @property string|null $paid_date
   * @property bool $is_paid
   * @property string $debt_date
   * @property string|null $description
   * @property float $amount
   * @property int $client_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Client $client
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereClientId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereDebtDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereIsPaid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt wherePaidDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt query()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static ClientDebt|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt clone()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static ClientDebt|null first(array|string $columns)
   * @method static ClientDebt firstOrFail(array|string $columns, string|null $message)
   * @method static ClientDebt sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<ClientDebt>|ClientDebt tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ClientDebt extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\CompanySetting
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $devise
   * @property string|null $id_nat
   * @property string|null $rccm
   * @property string|null $logo
   * @property string|null $phone
   * @property string|null $email
   * @property string|null $address
   * @property string $name
   * @property int|null $tenant_id
   * @property int $id
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereLogo($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereRccm($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereIdNat($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereDevise($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting query()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static CompanySetting|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting clone()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static CompanySetting|null first(array|string $columns)
   * @method static CompanySetting firstOrFail(array|string $columns, string|null $message)
   * @method static CompanySetting sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<CompanySetting>|CompanySetting tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class CompanySetting extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Expense
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property mixed $status
   * @property string|null $description
   * @property \Illuminate\Support\Carbon $expense_date
   * @property string $currency
   * @property decimal:2 $amount
   * @property int|null $user_id
   * @property int $expense_category_id
   * @property int $store_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\ExpenseCategory $category
   * @property-read \App\Models\Store $store
   * @property-read \App\Models\User $user
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereExpenseCategoryId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereCurrency($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereExpenseDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense query()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Expense|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Expense|null first(array|string $columns)
   * @method static Expense firstOrFail(array|string $columns, string|null $message)
   * @method static Expense sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Expense>|Expense tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Expense extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\ExpenseCategory
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $description
   * @property string $name
   * @property int $tenant_id
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Expense> $expenses
   * @property-read int|null $expenses_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory query()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static ExpenseCategory|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory clone()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static ExpenseCategory|null first(array|string $columns)
   * @method static ExpenseCategory firstOrFail(array|string $columns, string|null $message)
   * @method static ExpenseCategory sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<ExpenseCategory>|ExpenseCategory tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class ExpenseCategory extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Inventory
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $store_id
   * @property mixed $status
   * @property string $inventory_date
   * @property int $user_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @property-read \App\Models\Store $store
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\InventoryItem> $items
   * @property-read int|null $items_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereInventoryDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory query()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Inventory|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Inventory|null first(array|string $columns)
   * @method static Inventory firstOrFail(array|string $columns, string|null $message)
   * @method static Inventory sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Inventory>|Inventory tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Inventory extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\InventoryItem
   *
   * @property string|null $comment
   * @property int $difference
   * @property int $theoretical_quantity
   * @property int $physical_quantity
   * @property int $product_id
   * @property int $inventory_id
   * @property int $id
   * @property-read \App\Models\Inventory $inventory
   * @property-read \App\Models\Product $product
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereInventoryId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem wherePhysicalQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereTheoreticalQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereDifference($value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereComment($value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem query()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static InventoryItem|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem clone()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static InventoryItem|null first(array|string $columns)
   * @method static InventoryItem firstOrFail(array|string $columns, string|null $message)
   * @method static InventoryItem sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<InventoryItem>|InventoryItem tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class InventoryItem extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Language
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $locale
   * @property int $user_id
   * @property int $id
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereLocale($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language query()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Language|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Language|null first(array|string $columns)
   * @method static Language firstOrFail(array|string $columns, string|null $message)
   * @method static Language sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Language>|Language tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Language extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Plan
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int|null $max_stores
   * @property int|null $max_users
   * @property int $duration_days
   * @property float $price
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Subscription> $subscriptions
   * @property-read int|null $subscriptions_count
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan wherePrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereDurationDays($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereMaxUsers($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereMaxStores($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan query()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Plan|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Plan|null first(array|string $columns)
   * @method static Plan firstOrFail(array|string $columns, string|null $message)
   * @method static Plan sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Plan>|Plan tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Plan extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Product
   *
   * @property int $stock_alert
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $expiration_date
   * @property int $min_stock
   * @property float $sale_price
   * @property float $purchase_price
   * @property int $unit_id
   * @property int|null $brand_id
   * @property int $category_id
   * @property string $name
   * @property string $reference
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Category $category
   * @property-read \App\Models\Brand $brand
   * @property-read \App\Models\Unit $unit
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SaleItem> $saleItems
   * @property-read int|null $saleItems_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PurchaseItem> $purchases
   * @property-read int|null $purchases_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Store> $stores
   * @property-read int|null $stores_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TransferItem> $transferItems
   * @property-read int|null $transferItems_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereReference($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereCategoryId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereBrandId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereUnitId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product wherePurchasePrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereSalePrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereMinStock($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereExpirationDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereStockAlert($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product query()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Product|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Product|null first(array|string $columns)
   * @method static Product firstOrFail(array|string $columns, string|null $message)
   * @method static Product sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Product>|Product tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Product extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Purchase
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $store_id
   * @property mixed $status
   * @property string $purchase_date
   * @property float $total_paid
   * @property float $total_amount
   * @property int $user_id
   * @property int $supplier_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Supplier $supplier
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\PurchaseItem> $items
   * @property-read int|null $items_count
   * @property-read \App\Models\Store $store
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereSupplierId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereTotalAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereTotalPaid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase wherePurchaseDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase query()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Purchase|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Purchase|null first(array|string $columns)
   * @method static Purchase firstOrFail(array|string $columns, string|null $message)
   * @method static Purchase sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Purchase>|Purchase tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Purchase extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\PurchaseItem
   *
   * @property float $total_price
   * @property float $unit_price
   * @property int $quantity
   * @property int $product_id
   * @property int $purchase_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Purchase $purchase
   * @property-read \App\Models\Product $product
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem wherePurchaseId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereUnitPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereTotalPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem query()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static PurchaseItem|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem clone()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static PurchaseItem|null first(array|string $columns)
   * @method static PurchaseItem firstOrFail(array|string $columns, string|null $message)
   * @method static PurchaseItem sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseItem>|PurchaseItem tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class PurchaseItem extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\PurchaseReturn
   *
   * @property string|null $reason
   * @property string $return_date
   * @property int $quantity
   * @property int $product_id
   * @property int $purchase_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Purchase $purchase
   * @property-read \App\Models\Product $product
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn wherePurchaseId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereReturnDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn query()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static PurchaseReturn|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn clone()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static PurchaseReturn|null first(array|string $columns)
   * @method static PurchaseReturn firstOrFail(array|string $columns, string|null $message)
   * @method static PurchaseReturn sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<PurchaseReturn>|PurchaseReturn tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class PurchaseReturn extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Role
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $description
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
   * @property-read int|null $users_count
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role query()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Role|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Role|null first(array|string $columns)
   * @method static Role firstOrFail(array|string $columns, string|null $message)
   * @method static Role sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Role>|Role tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Role extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Sale
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $store_id
   * @property mixed $status
   * @property string $sale_date
   * @property float $total_paid
   * @property float $total_amount
   * @property int $user_id
   * @property int|null $client_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Client $client
   * @property-read \App\Models\User $user
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SaleItem> $items
   * @property-read int|null $items_count
   * @property-read \App\Models\Store $store
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereClientId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereTotalAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereTotalPaid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereSaleDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale query()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Sale|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Sale|null first(array|string $columns)
   * @method static Sale firstOrFail(array|string $columns, string|null $message)
   * @method static Sale sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Sale>|Sale tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Sale extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\SaleItem
   *
   * @property float $total_price
   * @property float $discount
   * @property float $unit_price
   * @property int $quantity
   * @property int $product_id
   * @property int $sale_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Sale $sale
   * @property-read \App\Models\Product $product
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereSaleId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereUnitPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereDiscount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereTotalPrice($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem query()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static SaleItem|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem clone()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static SaleItem|null first(array|string $columns)
   * @method static SaleItem firstOrFail(array|string $columns, string|null $message)
   * @method static SaleItem sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleItem>|SaleItem tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class SaleItem extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\SaleReturn
   *
   * @property string|null $reason
   * @property string $return_date
   * @property int $quantity
   * @property int $store_id
   * @property int $product_id
   * @property int $sale_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Sale $sale
   * @property-read \App\Models\Store $store
   * @property-read \App\Models\Product $product
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereSaleId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereReturnDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereReason($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn query()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static SaleReturn|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn clone()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static SaleReturn|null first(array|string $columns)
   * @method static SaleReturn firstOrFail(array|string $columns, string|null $message)
   * @method static SaleReturn sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<SaleReturn>|SaleReturn tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class SaleReturn extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Store
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $email
   * @property string|null $phone
   * @property string|null $location
   * @property string $name
   * @property int $tenant_id
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Product> $products
   * @property-read int|null $products_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
   * @property-read int|null $users_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Sale> $sales
   * @property-read int|null $sales_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Purchase> $purchases
   * @property-read int|null $purchases_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Expense> $expenses
   * @property-read int|null $expenses_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\CashRegister> $cashRegisters
   * @property-read int|null $cashRegisters_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Inventory> $inventories
   * @property-read int|null $inventories_count
   * @property-read \App\Models\CashRegister $cashRegister
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereLocation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store query()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Store|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Store|null first(array|string $columns)
   * @method static Store firstOrFail(array|string $columns, string|null $message)
   * @method static Store sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Store>|Store tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Store extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\StoreCashRegister
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float $current_balance
   * @property float $opening_balance
   * @property int $store_id
   * @property int $id
   * @property-read \App\Models\Store $store
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereOpeningBalance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereCurrentBalance($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister query()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static StoreCashRegister|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister clone()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static StoreCashRegister|null first(array|string $columns)
   * @method static StoreCashRegister firstOrFail(array|string $columns, string|null $message)
   * @method static StoreCashRegister sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreCashRegister>|StoreCashRegister tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class StoreCashRegister extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\StoreProduct
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $quantity
   * @property int $product_id
   * @property int $store_id
   * @property int $id
   * @property-read \App\Models\Store $store
   * @property-read \App\Models\Product $product
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct query()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static StoreProduct|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct clone()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static StoreProduct|null first(array|string $columns)
   * @method static StoreProduct firstOrFail(array|string $columns, string|null $message)
   * @method static StoreProduct sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreProduct>|StoreProduct tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class StoreProduct extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\StoreUser
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property mixed $role
   * @property int $user_id
   * @property int $store_id
   * @property int $id
   * @property-read \App\Models\Store $store
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereRole($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser query()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static StoreUser|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser clone()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static StoreUser|null first(array|string $columns)
   * @method static StoreUser firstOrFail(array|string $columns, string|null $message)
   * @method static StoreUser sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<StoreUser>|StoreUser tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class StoreUser extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Subscription
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property boolean $is_active
   * @property string $end_date
   * @property string $start_date
   * @property float $amount
   * @property int $plan_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Tenant $tenant
   * @property-read \App\Models\Plan $plan
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription wherePlanId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereStartDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereEndDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereIsActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription query()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Subscription|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Subscription|null first(array|string $columns)
   * @method static Subscription firstOrFail(array|string $columns, string|null $message)
   * @method static Subscription sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Subscription>|Subscription tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Subscription extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Supplier
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property float $debt
   * @property string|null $address
   * @property string|null $email
   * @property string|null $phone
   * @property string $name
   * @property int $tenant_id
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Purchase> $purchases
   * @property-read int|null $purchases_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\SupplierDebt> $debts
   * @property-read int|null $debts_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereDebt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier query()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Supplier|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Supplier|null first(array|string $columns)
   * @method static Supplier firstOrFail(array|string $columns, string|null $message)
   * @method static Supplier sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Supplier>|Supplier tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Supplier extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\SupplierDebt
   *
   * @property string|null $paid_date
   * @property bool $is_paid
   * @property string $debt_date
   * @property string|null $description
   * @property float $amount
   * @property int $supplier_id
   * @property int $tenant_id
   * @property int $id
   * @property-read \App\Models\Supplier $supplier
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereSupplierId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereAmount($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereDescription($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereDebtDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereIsPaid($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt wherePaidDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt query()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static SupplierDebt|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt clone()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static SupplierDebt|null first(array|string $columns)
   * @method static SupplierDebt firstOrFail(array|string $columns, string|null $message)
   * @method static SupplierDebt sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<SupplierDebt>|SupplierDebt tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class SupplierDebt extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Tenant
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property boolean $is_active
   * @property string|null $address
   * @property string|null $phone
   * @property string $email
   * @property string|null $contact_name
   * @property string $name
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $users
   * @property-read int|null $users_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Store> $stores
   * @property-read int|null $stores_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Subscription> $subscriptions
   * @property-read int|null $subscriptions_count
   * @property-read \App\Models\Subscription $activeSubscription
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereContactName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant wherePhone($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereAddress($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereIsActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant query()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Tenant|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Tenant|null first(array|string $columns)
   * @method static Tenant firstOrFail(array|string $columns, string|null $message)
   * @method static Tenant sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Tenant>|Tenant tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Tenant extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Transfer
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string $transfer_date
   * @property mixed $status
   * @property int $user_id
   * @property int $to_store_id
   * @property int $from_store_id
   * @property int $id
   * @property-read \App\Models\Store $fromStore
   * @property-read \App\Models\Store $toStore
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\TransferItem> $items
   * @property-read int|null $items_count
   * @property-read \App\Models\User $user
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereFromStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereToStoreId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereUserId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereStatus($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereTransferDate($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer query()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Transfer|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Transfer|null first(array|string $columns)
   * @method static Transfer firstOrFail(array|string $columns, string|null $message)
   * @method static Transfer sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Transfer>|Transfer tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Transfer extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\TransferItem
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property int $quantity
   * @property int $product_id
   * @property int $transfer_id
   * @property int $id
   * @property-read \App\Models\Transfer $transfer
   * @property-read \App\Models\Product $product
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereTransferId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereProductId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereQuantity($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem query()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static TransferItem|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem clone()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static TransferItem|null first(array|string $columns)
   * @method static TransferItem firstOrFail(array|string $columns, string|null $message)
   * @method static TransferItem sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<TransferItem>|TransferItem tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class TransferItem extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\Unit
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $abbreviation
   * @property string $name
   * @property int $tenant_id
   * @property int $id
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Product> $products
   * @property-read int|null $products_count
   * @property-read \App\Models\Tenant $tenant
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereAbbreviation($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit query()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static Unit|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit clone()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static Unit|null first(array|string $columns)
   * @method static Unit firstOrFail(array|string $columns, string|null $message)
   * @method static Unit sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<Unit>|Unit tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class Unit extends \Illuminate\Database\Eloquent\Model
  {
    //
  }

  /**
   * App\Models\User
   *
   * @property \Illuminate\Support\Carbon|null $updated_at
   * @property \Illuminate\Support\Carbon|null $created_at
   * @property string|null $remember_token
   * @property bool $is_active
   * @property int|null $role_id
   * @property string $password
   * @property \Illuminate\Support\Carbon|null $email_verified_at
   * @property string $email
   * @property string $name
   * @property int|null $tenant_id
   * @property int $id
   * @property-read mixed $locale
   * @property-read \App\Models\Role $role
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Store> $stores
   * @property-read int|null $stores_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\CashRegister> $cashRegisters
   * @property-read int|null $cashRegisters_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Expense> $expenses
   * @property-read int|null $expenses_count
   * @property-read \App\Models\Tenant $tenant
   * @property-read \App\Models\Language $language
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Laravel\Sanctum\PersonalAccessToken> $tokens
   * @property-read int|null $tokens_count
   * @property-read \Illuminate\Database\Eloquent\Collection<int, \Illuminate\Notifications\DatabaseNotification> $notifications
   * @property-read int|null $notifications_count
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTenantId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereName($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmail($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereEmailVerifiedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePassword($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRoleId($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIsActive($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRememberToken($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereCreatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereUpdatedAt($value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newModelQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User newQuery()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User query()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User select(mixed $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User selectRaw(string $expression)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User fromRaw(string $expression, mixed $bindings)
   * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static array parseSub(mixed $query)
   * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addSelect(mixed $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User distinct()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forceIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User ignoreIndex(string $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
   * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeWheres(array $wheres, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addArrayOfWheres(array $column, string $boolean, string $method)
   * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
   * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
   * @method static bool invalidOperator(string $operator)
   * @method static bool isBitwiseOperator(string $operator)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRaw(\Illuminate\Contracts\Database\Query\Expression|string $sql, mixed $bindings, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRaw(string $sql, mixed $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereValueBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereValueNotBetween(mixed $value, array{: \Illuminate\Contracts\Database\Query\Expression|string, : \Illuminate\Contracts\Database\Query\Expression|string} $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNested(string $boolean)
   * @method static \Illuminate\Database\Query\Builder forNestedWhere()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addWhereExistsQuery(string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereRowValues(array $columns, string $operator, array $values, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereRowValues(array $columns, string $operator, array $values)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContains(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContain(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContain(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonOverlaps(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntOverlap(string $column, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonContainsKey(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonContainsKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonDoesntContainKey(string $column, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonDoesntContainKey(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereJsonLength(string $column, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dynamicWhere(string $method, array $parameters)
   * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFullText(string|string[] $columns, string $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFullText(string|string[] $columns, string $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupByRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNested(string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNull(array|string $columns, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingNotNull(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingNotNull(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingBetween(string $column, string $boolean, bool $not)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User havingRaw(string $sql, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orHavingRaw(string $sql)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User inRandomOrder(string|int $seed)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orderByRaw(string $sql, array $bindings)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User skip(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User offset(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User take(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User limit(int $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User groupLimit(int $value, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPage(int $page, int $perPage)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageBeforeId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User forPageAfterId(int $perPage, int|null $lastId, string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User reorderDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column)
   * @method static array removeExistingOrdersFor(string $column)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lock(string|bool $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User lockForUpdate()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User sharedLock()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User beforeQuery()
   * @method static void applyBeforeQueryCallbacks()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User afterQuery()
   * @method static mixed applyAfterQueryCallbacks(mixed $result)
   * @method static string toSql()
   * @method static string toRawSql()
   * @method static User|null find(int|string $id, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static mixed findOr(mixed $id, callable|string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable|null $callback)
   * @method static mixed value(string $column)
   * @method static mixed rawValue()
   * @method static mixed soleValue(string $column)
   * @method static \Illuminate\Support\Collection<int,\stdClass> get(string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runSelect()
   * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page, \Closure|int|null $total)
   * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $pageName, int|null $page)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, string|\Illuminate\Contracts\Database\Query\Expression|(string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
   * @method static int<0, max> getCountForPagination((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static array runPaginationCountQuery((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneForPaginationCount()
   * @method static (string|\Illuminate\Contracts\Database\Query\Expression)[] withoutSelectAliases((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns)
   * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
   * @method static void enforceOrderBy()
   * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
   * @method static string|null stripTableForPluck(string $column)
   * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
   * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
   * @method static string implode(string $column, string $glue)
   * @method static bool exists()
   * @method static bool doesntExist()
   * @method static mixed existsOr()
   * @method static mixed doesntExistOr()
   * @method static int<0, max> count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
   * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
   * @method static mixed aggregate(string $function, array $columns)
   * @method static float|int numericAggregate(string $function, array $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setAggregate(string $function, (\Illuminate\Contracts\Database\Query\Expression|string)[] $columns)
   * @method static \TResult onceWithColumns((string|\Illuminate\Contracts\Database\Query\Expression)[] $columns, callable $callback)
   * @method static bool insert()
   * @method static int<0, max> insertOrIgnore()
   * @method static int insertGetId(string|null $sequence)
   * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
   * @method static int<0, max> update()
   * @method static int updateFrom()
   * @method static bool updateOrInsert()
   * @method static int upsert()
   * @method static int<0, max> increment(string $column, float|int $amount)
   * @method static int<0, max> incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int<0, max> decrement(string $column, float|int $amount)
   * @method static int<0, max> decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
   * @method static int delete(mixed $id)
   * @method static void truncate()
   * @method static \Illuminate\Database\Query\Builder newQuery()
   * @method static \Illuminate\Database\Query\Builder forSubQuery()
   * @method static list<string> getColumns()
   * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
   * @method static \Illuminate\Support\Collection getUnionBuilders()
   * @method static mixed getLimit()
   * @method static mixed getOffset()
   * @method static list getBindings()
   * @method static array{select: list, from: list, join: list, where: list, groupBy: list, having: list, order: list, union: list, unionOrder: list} getRawBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User setBindings(list $bindings, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User addBinding(mixed $value, "select"|"from"|"join"|"where"|"groupBy"|"having"|"order"|"union"|"unionOrder" $type)
   * @method static mixed castBinding(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User mergeBindings(self $query)
   * @method static list cleanBindings(array $bindings)
   * @method static mixed flattenValue(mixed $value)
   * @method static string defaultKeyName()
   * @method static \Illuminate\Database\ConnectionInterface getConnection()
   * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
   * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User useWritePdo()
   * @method static bool isQueryable(mixed $value)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User clone()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithout()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User cloneWithoutBindings()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dump(mixed ...$args)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User dumpRawSql()
   * @method static void dd()
   * @method static void ddRawSql()
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWherePast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrPast(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereNowOrFuture(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User wherePastOrFuture(array|string $columns, string $operator, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereToday(array|string $columns, string $boolean)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereBeforeToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrBefore(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereAfterToday(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User orWhereTodayOrAfter(array|string $columns)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
   * @method static bool chunk(int $count, callable $callback)
   * @method static mixed chunkMap(callable $callback, int $count)
   * @method static bool each(callable $callback, int $count)
   * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
   * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
   * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
   * @method static mixed lazy(int $chunkSize)
   * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
   * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
   * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
   * @method static User|null first(array|string $columns)
   * @method static User firstOrFail(array|string $columns, string|null $message)
   * @method static User sole(array|string $columns)
   * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
   * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
   * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
   * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
   * @method static \Illuminate\Database\Eloquent\Builder<User>|User tap(callable $callback)
   * @method static mixed pipe(callable $callback)
   * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
   * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
   * @method static \Illuminate\Support\Collection explain()
   * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
   * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
   * @method static void throwBadMethodCallException(string $method)
   * @method static void macro(string $name, object|callable $macro)
   * @method static void mixin(object $mixin, bool $replace)
   * @method static bool hasMacro(string $name)
   * @method static void flushMacros()
   * @method static mixed macroCall(string $method, array $parameters)
   * @mixin \Illuminate\Database\Query\Builder
   */
  class User extends \Illuminate\Foundation\Auth\User
  {
    //
  }

}